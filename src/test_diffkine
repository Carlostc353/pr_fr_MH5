#!/usr/bin/env python3

import rospy
#from __future__ import print_function
from sensor_msgs.msg import JointState
from markers import *
from proy_functions import *

if __name__ == '__main__':
    # Initialize the node
    rospy.init_node("testKineControlPosition")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    # Files for the logs
    fxcurrent = open("/tmp/xcurrent.txt", "w")                
    fxdesired = open("/tmp/xdesired.txt", "w")
    fq = open("/tmp/q.txt", "w")


    # Markers for the current and desired positions
    bmarker_current  = BallMarker(color['RED'])
    bmarker_desired = BallMarker(color['GREEN'])


    # Joint names
    jnames = ['Revolute 1', 'Revolute 2', 'Revolute 3','Slider 4', 'Revolute 5', 'Revolute 6','Revolute 7']

    # Desired position
    xd = np.array([0.6, 0.4, 0.2])
    # Initial configuration
    q0  = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0])


    # Resulting initial position (end effector with respect to the base link)
    T = fkine_mh5lsii(q0)
    x0 = T[0:3,3]


    # Red marker shows the achieved position
    bmarker_current.xyz(x0)
    # Green marker shows the desired position
    bmarker_desired.xyz(xd)


    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q0
    pub.publish(jstate)


    # Frequency (in Hz) and control period 
    freq = 200
    dt = 1.0/freq
    rate = rospy.Rate(freq)
    i=0
    k=1
    # Initial joint configuration
    q = copy(q0)
    epsilon= 0.0001
    # Main loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Kinematic control law for position (complete here)
        # -----------------------------
        Tq=fkine_mh5lsii(q)
        J = jacobian_mh5lsii(q)
    
        x= Tq[0:3,3]
    
        e = x - xd
        de= -k*e
        
        Jq =(J.T).dot(np.linalg.inv(J.dot(J.T)))

        dq= Jq.dot(de)
        print(dq)
        q = q + dt*dq


        # Verificación si se llegó al punto deseado
        if (np.linalg.norm(e)<epsilon):
            print("Se llegó al punto deseado en {:.3} segundos".format(i*dt))
            break
        i=i+1
        if (i > 1e5): 
            print("Se excedió el número de iteraciones")
            break 

        # -----------------------------
    
        # Log values                                                      
        fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
        fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
        fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+
                str(q[4])+" "+str(q[5])+"\n")
        
        # Publish the message
        jstate.position = q
        pub.publish(jstate)
        bmarker_desired.xyz(xd)
        bmarker_current.xyz(x)
        # Wait for the next iteration
        rate.sleep()


    print('ending motion ...')
    fxcurrent.close()
    fxdesired.close()
    fq.close()
